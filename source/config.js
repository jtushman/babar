import { z } from 'zod';

export const schema = z.object({
  overview: z.string().describe("A summary of the director's purpose and role in the codebase"),
  components: z.array(z.string()).describe('List and describe key components, classes, or modules'),
  architecture: z.string().describe('Explain how components interact and any important patterns'),
  conventions: z.string().describe('Describe coding standards, patterns, and practices'),
  refactoringOpportunities: z.array(z.string()).describe('Identify potential improvements'),
  technicalDebt: z.string().describe('Note any concerning patterns or areas needing attention'),
});

export const defaultConfig = {
  schema: schema,
  prompt: `You are a technical documentation and code analysis expert. Analyze this directory containing {fileCount} files and {childCount} subdirectories.

Create a markdown document with the following structure:

<!-- Generated by Babar on {timestamp} -->

# Directory Analysis

## Overview
[A concise description of this directory's purpose and role in the codebase]

## Components
[List and describe key components, classes, or modules]

## Architecture
[Explain how components interact and any important patterns]

## Dependencies
[List notable external dependencies and integrations]

## Conventions
[Document coding standards, patterns, and practices]

{includeSubdirs}

## Refactoring Opportunities
[Identify potential improvements such as:
- Code duplication that could be consolidated
- Complex methods that could be simplified
- Inconsistent patterns that could be standardized
- Opportunities for better abstraction
- Performance improvements]

## Technical Debt
[Note any concerning patterns or areas needing attention]

Keep the response in this exact markdown structure for consistent parsing. Focus on what would be most helpful for developers to understand and improve this codebase.`,

  // OpenAI API settings
  model: 'gpt-4',
  temperature: 0.1,

  // Analysis settings
  includeFiles: ['**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx', '**/*.py', '**/*.rb', '**/*.go'],
  excludePatterns: ['**/node_modules/**', '**/dist/**', '**/build/**', '**/.git/**'],
  maxTokensPerRequest: 4000,

  // Output settings
  outputFile: '.aimd',
};

export function loadConfig() {
  let config = { ...defaultConfig };

  // Override with environment variables if present
  if (process.env.BABAR_PROMPT) {
    config.prompt = process.env.BABAR_PROMPT;
  }
  if (process.env.BABAR_MODEL) {
    config.model = process.env.BABAR_MODEL;
  }
  if (process.env.BABAR_TEMPERATURE) {
    config.temperature = parseFloat(process.env.BABAR_TEMPERATURE);
  }

  // Look for .babarrc.json in the current directory or parent directories
  try {
    const userConfig = require(process.cwd() + '/.babarrc.json');
    config = { ...config, ...userConfig };
  } catch (error) {
    // No config file found, use defaults
  }

  return config;
}
